//--------------------------------------------------------------------------------
Ya hice el soporte para busquedas genericas poniendo un metodo buscar(IModuloBusqueda modulo) en la InterfaceDAO (e implementandolo en GeneralDAO).

La interfaz tiene la siguiente forma:

public interface IModuloBusqueda {    
    public String getSQL();    
    public ArrayList getParametros();    
    public IEstrategiaMapeoDatos getEstrategiaMapeoDatos();    
}

Este enfoque trae varias ventajas. Veamos:

1-Las clases que implementen IModuloBusqueda tienen toda la informacion necesaria para realizar la busqueda. Cualquier cosa que se quiera cambiar sobre una busqueda, se puede cambiar en una sola clase.

2-Si partimos de (1), entonces estas clases tambien obligan a tener toda la informacion para generar los valores de los parametros de las consultas. Es decir, si queremos buscar los clientes de un departamento especifico, podemos hacer lo siguiente:

DepartamentoMO departamento = new Departamento("Desarrollo");
ClienteDAO clienteDAO = new ClienteDAO();
List clientesDepartamento = clienteDAO.buscar(new BusquedaClientesDepartamento(departamento));

Se puede observar que el constructor de la clase BusquedaClientesDepartamento recibe el departamento del que se quieren buscar los clientes. Esta clase seria asi mas o menos:

public class BusquedaClientesDepartamento implements IModuloBusqueda {
    DepartamentoMO departamento;	

    public BusquedaClientesDepartamento(DepartamentoMO departamento) {
        this.departamento = departamento;
    }

    public String getSQL() {
        return "SELECT * FROM clientes WHERE departamento_descripcion = ?";
    }

    public ArrayList getParametros() {
        ArrayList params = new ArrayList(1);
	params.add(departamento.getDescripcion());
	return params;
    }

    public IEstrategiaMapeoDatos getEstrategiaMapeoDatos() {
	return new IEstrategiaMapeoDatos() {
	    public ArrayList crearListaResultados(ResultSet rs) throws SQLException {
	    	//implementacion aqui
	    }

    	    public Object crearObjetoResultado(ResultSet rs) throws SQLException {
		//implementacion aqui
	    }
	}
    }
}
//-----------------------------------------------------------------------------------------------------
Veamos esta mejora:

Tenemos un wrapper general para modulos de busquedas que se encarga de realizar busquedas:

public class ModuloBusquedaWrapper implements IModuloBusqueda {
    IModuloBusqueda moduloGeneral;
    Object objetoBaseBusqueda;

    public BusquedaClientesDepartamento(IModuloBusqueda moduloGeneral, Object objetoBaseBusqueda) {
        this.moduloGeneral = moduloGeneral;
	this.objetoBaseBusqueda = objetoBaseBusqueda;
    }

    protected abstract String getCondicionBusqueda();
    protected abstract ArrayList getParametrosObjeto(Object objeto);

    public String getSQL() {
	return formarSQL(moduloGeneral.getSQL(), getCondicionBusqueda());
    }

    public ArrayList getParametros() {
	ArrayList params = moduloGeneral.getParametros();
	ArrayList otrosParams = getParametrosObjeto(objetoBaseBusqueda);
        return unirListas(params, otrosParams);	
    }

    public IEstrategiaMapeoDatos getEstrategiaMapeoDatos() {
	return moduloGeneral.getEstrategiaMapeoDatos();
    }

    //..........
}

Tenemos un wrapper especifico para cada objeto:

public class ModuloBusquedaPorDepartamento extends ModuloBusquedaWrapper {
    public ModuloBusquedaPorDepartamento(IModuloBusqueda moduloGeneral, Object objetoBaseBusqueda) {
	super(moduloGeneral, objetoBaseBusqueda);
    }

    protected String getCondicionBusqueda() {
	return "id_departamento = ?";
    }
    protected ArrayList getParametrosObjeto(Object objeto) {
	ArrayList params = new ArrayList(1);
	params.add(((Departamento) objeto).getIdDepartamento());
    }
}

Hasta aqui podemos usar esto de la siguiente manera:

public ArrayList buscarClientePorDepartamento(DepartamentoMO departamento) {
    IModuloBusqueda mb = new ModuloBusquedaPorDepartamento(new ModuloBusquedaTodosClientes(), departamento);
    return GeneralDAO.buscar(mb);//El buscar(modulo) debe ser estatico???
}

Pero se puede hacer mas: Tenemos un manager (service locator, dictionary, registry) que se configura para cada tipo de objeto:

//En algun lado ponemos esto:
ManagerModuloBusquedasSimples.setService(ClienteMO.class, 
					 ModuloBusquedaTodosClientes.class,//modulo de buscar todos 
					 ModuloBusquedaPorCliente.class);//modulo wrapper para filtrar
ManagerModuloBusquedasSimples.setService(DepartamentoMO.class, 
					 ModuloBusquedaTodosDepartamentos.class, 
					 ModuloBusquedaPorDepartamento.class);

La clase ManagerModuloBusquedasSimples tiene ademas el siguiente metodo

public static IModuloBusqueda getModuloBusqueda(Class claseBase, Object objeto) {
    //Aqui se construyen y se arman todas las instancias de IModuloBusqueda, se envuelven y se retorna una.
    IModuloBusqueda moduloBase = mapaBases.get(claseBase);
    IModuloBusqueda moduloWrapper = getWrapperParaClase(objeto.getClass(), moduloBase, objeto);
    return moduloWrapper;
}

public static IModuloBusqueda getWrapperParaClase(Class claseBase, Object objeto) {
    //Aqui se construyen y se arman todas las instancias de IModuloBusqueda, se envuelven y se retorna una.
    return (IModuloBusqueda) objeto.getClass().invokeConstructor(moduloBase, objeto);
}



Luego este servicio se puede usar asi:

//Este metodo busca un cliente filtrado por cualquier objeto (por departamento, por pais, etc.)
public ArrayList buscarClientePor(Object objeto) {
	IModuloBusqueda modulo = ManagerModuloBusquedasSimples.getModuloBusqueda(ClienteMO.class, objeto);
	return GeneralDAO.buscar(modulo);
}

//--------------------------------------------------------------------------------

Veamos ahora como creo que se podria usar el servicio con PicoContainer:

public ArrayList buscarClientePorDepartamento(DepartamentoMO departamento) {
    MutablePicoContainer pico = new DefaultPicoCOntainer();
    pico.addComponent(ModuloBusquedaTodosClientes.class);
    pico.addCOmponent(ModuloBusquedaPorDepartamento.class);
    pico.addComponent(departamento);
    return GeneralDAO.buscar(pico.getComponent(ModuloBusquedaPorDepartamento.class));
}


