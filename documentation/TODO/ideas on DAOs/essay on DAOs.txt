Durante el desarrollo de las aplicaciones para el carnico, nuestro equipo enfrento varias disyuntivas relativas al diseño e implementacion de varias partes de las aplicaciones.

Una de estas decisiones estaba relacionada con la forma en que debia estructurarse el acceso a los datos en la BD, o sea, como se relacionaban los objetos de la capa de acceso a datos (DAO) con las demas capas.

Conversando con Nolvis me di cuenta que el enfoque de que cada DAO defina todas las consultas particulares no es negativo. Al final, el gestor de BD debe recibir una consulta personalizada. El intento inicial era encontrar alguna forma de personalizar las consultas de los DAOs, pero no creando una funcion para cada servicio que estos brinden, sino solo dejar en estos los servicios generales (buscarTodos(), buscar(Object llave), etc.) y configurar los filtros desde afuera.

El primer problema viene con tratar de generalizar las consultas, pues estas deberian servir para todos. Por ejemplo, la consulta buscarTodos() en OrdenDespachoDAO deberia buscar todos los datos necesarios para construir cada orden: transportista, productos, cliente, etc. Si alguien necesitara mostrar solo el numero de la orden y la descripcion del cliente, evidentemente esta consulta estaria haciendo trabajo extra. Por otro lado, si se necesita mostrar algun dato mas, entonces la consulta se tendria que modificar, lo cual a su vez podria resultar en una sobrecarga innecesaria para la mayoria de los servicios que requiere la aplicacion.

El problema de la configuracion con filtros no es para nada trivial, y puede complejizar el sistema mas que simplificarlo. Por ejemplo, puede que necesitemos mostrar solo las ordenes que no esten facturadas. Este filtro no es facil expresarlo, pues requiere de un JOIN con otra tabla que no aparece en la consulta de buscar todos (por que habria de estar???). Que hariamos en este caso???. Pondriamos este JOIN en la consulta buscarTodos(), pero garantizando que incluso los que esten facturados se obtengan, aunque podamos diferenciarlos por el valor de algun campo dentro del resultado: sobrecarga de la consulta!!!.

Pero vayamos realmente al origen de este enfoque de DAOs generales, con consultas generales, y configuracion de las consultas mediante filtros. En realidad, el intento de generalizar los DAOs se origino con la necesidad de declarar todos estos objetos como de tipo InterfaceDAO, y minimizar la necesidad de realizar casteos. La ventaja que nos da este enfoque es que si nos apegamos al cumplimiento de la interfaz, despues se puede cambiar la implementacion de esta sin que la aplicacion sufra ningun cambio. Digamos, por ejemplo, que se puede cambiar la forma de guardar los datos y de recuperarlos sin que esto afecte demasiado el uso de los DAOs en las distintas partes de la aplicacion.

Y si pudieramos establecer una forma general de realizar las busquedas, de tal forma que estas puedan ser configuradas, ejecutadas y su resultado convertido a objetos del dominio???. Esta funcionalidad la pudieramos poner en los DAOs, pero el configurador de las busquedas podria ser la capa de servicio. Ver lo que tengo escrito sobre los Service Locators.

