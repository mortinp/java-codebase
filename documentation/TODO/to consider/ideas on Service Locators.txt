-Se podra usar Service Locator para configurar las busquedas de los DAOs, manteniendo solo un metodo de busqueda que le pida al locator la consulta que se desea ejecutar? Por lo que he visto, el service locator da facilidades para escoger las variantes multiples veces, pues el servicio se puede invocar con distintos parametros de configuracion (por ejemplo, un nombre que indique el servicio  que se desea) desde varias partes.
Asi, los DAOs especificos lo que harian en cada consulta especifica seria configurar el service locator y ejecutar la sentencia.
Actualmente en el core tengo implementado algo parecido, pero que define las consultas dentro de la misma clase (hard coded). Lo bueno del Service Locator (y Dependency Injection) es que se obtiene una arquitectura de plugins, donde las consultas pueden estar definidas en algun lugar y pueden ser inyectadas dentro del procedimiento que ejecuta las consutas.

-Los Service Locators deberian implementarse en una capa mas arriba, y no en GeneralDAO. Se puede hacer una clase general que actue como wrapper de GeneralDAO, y que incluya este tipo de servicio. Se puede incluso definir una interfaz para esta clase, para que se puedan implementar los servicios de diferenets formas, sin tener que cambiar ningun codigo cliente.

-Todo codigo cliente de las clases que encapsulan la implementacion de Service Locators deben invocar los servicios por su nombre (o algun tipo de identificador). Asi, las busquedas se ejecutan a traves de un metodo unico, que busca al service locator adecuado y obtiene la configuracion desde este.
Esto no quiere decir que desde el codigo de la capa de Presentacion se necesite saber el nombre de cada servicio. La clases de la capa de servicio pueden definir una funcion para cada busqueda, y cuyo nombre indique bien lo que se desea. Dentro de estas funciones es donde se encapsula el llamado a la busqueda en los DAOs pasandole el nombre del servicio de busqueda que se desea.

-Como se pueden configurar distintos service locators para distintos DAOs (ej. tener un SL para cada DAO)???. Se podra lograr a traves de un Registry???. o un Manager que se encargue de esto???... de todas formas hay que hacer una configuracion para este registry/Manager.

-Ya hice el soporte para busquedas genericas poniendo un metodo buscar(IModuloBusqueda modulo) en la InterfaceDAO (e implementandolo en GeneralDAO).

Ahora bien, la forma de usar estas busquedas se realizan definiendo los modulos de busqueda y luego invocando esta funcion buscar.
Lo que sucede es que se puede incluir un servicio de Service Locator haciendo un wrapper/decorator para la clase GeneralDAO, que realice la configuracion necesaria para construir el modulo de busqueda (a partir de ficheros o hard coded). Asi, podriamos usar las busquedas de la siguiente forma:

InterfaceDAO dao = new WrapperConduceDAO(new ConduceDAO());

-Se puede implementar un Service Locator para cada DAO, cuyos servicios son la obtencion del modulo de busqueda apropiado:

---------excerpt from http://martinfowler.com/articles/injection.html--------------
A Dynamic Service Locator

In this case, the service locator uses a map instead of fields for each of the services, and provides generic methods to get and load services.

class ServiceLocator...
    private static ServiceLocator soleInstance;
    public static void load(ServiceLocator arg) {
        soleInstance = arg;
    }
    private Map services = new HashMap();
    public static Object getService(String key){
        return soleInstance.services.get(key);
    }
    public void loadService (String key, Object service) {
        services.put(key, service);
    }

Configuring involves loading a service with an appropriate key.

class Tester...
    private void configure() {
        ServiceLocator locator = new ServiceLocator();
        locator.loadService("MovieFinder", new ColonSeparatedMovieFinder("movies1.txt"));
        ServiceLocator.load(locator);
    }

I use the service by using the same key string.

class MovieLister...
    MovieFinder finder = (MovieFinder) ServiceLocator.getService("MovieFinder");

On the whole I dislike this approach. Although it's certainly flexible, it's not very explicit. The only way I can find out how to reach a service is through textual keys. I prefer explicit methods because it's easier to find where they are by looking at the interface definitions.

....o mejor todavia....

Using both a locator and injection with Avalon

Dependency injection and a service locator aren't necessarily mutually exclusive concepts. A good example of using both together is the Avalon framework. Avalon uses a service locator, but uses injection to tell components where to find the locator.

Berin Loritsch sent me this simple version of my running example using Avalon.

public class MyMovieLister implements MovieLister, Serviceable {
    private MovieFinder finder;

    public void service( ServiceManager manager ) throws ServiceException {
        finder = (MovieFinder)manager.lookup("finder");
    } 
      

The service method is an example of interface injection, allowing the container to inject a service manager into MyMovieLister. The service manager is an example of a service locator. In this example the lister doesn't store the manager in a field, instead it immediately uses it to lookup the finder, which it does store.

...la idea que tuve arriba de un Registry/Manager es esta misma idea...
//----------------------------------------------------------

Lo que necesito configurar es que ServiceLocator va para cada DAO, y para cada uno de estos, definir las busquedas que puede proveer.

Algo como:

ServiceLocator slClientes = new ServiceLocator();

private void configure() {
        DepartamentoMO departamento = new Departamento("Desarrollo");
	slClientes.loadService("porDepartamento", new BusquedaClientesDepartamento(departamento));
}

public void buscarPorDepartamento() {
	ClienteDAO clienteDAO = new ClienteDAO();
	return clienteDAO.buscar(slClientes.getService("porDepartamento"));
}


