--------------------------------------------------------------
Estaba leyendo el articulo de Martin Fowler sobre Language Workbenches, y el ponia un ejemplo de un pequenno lenguaje para configurar la lectura de un fichero de configuracion para crear objetos.
Se me ocurrio la idea que con esto se puede hacer tambien un pequenno lenguaje para especificar las validaciones que se deben realizar en cada pantalla, y que este sea menos verboso que Java. Para esto tengo que poder separar la especificacion de las validaciones de la pantalla del nomeclador, y poder especificar a que componente de la pantalla pertenece cada validacion.
El lenguaje incluso puede estar escrito en Phyton, y podriamos linkear de alguna forma este con la aplicacion (Jyton???)

Especificacion del lenguaje:
----------------------------------------------------------------
Se podria crear un DSL para establecer los mapeos entre campos de la BD y atributos de la clase. Se podria hacer algo asi mas o menos:

map class(org.desoftgr.modelos.ClaseXMO) to table(tableX) {
attrA: campoA @key @noupdate
attrB: campoB @key @noupdate
attrC: campoC 
attrD: campoD @noupdate
attrE: campoE 
attrF: campoF
}

*OTRAS ANOTACIONES QUE SE PUEDEN IMPLEMENTAR: @autonumeric, @lazyload, @foreignkey.

NOTA: Los atributos no tiene que ser necesariamente propiedades de la clase, sino que pueden ser metodos de acceso ('accessors').

-En el mapa para el update estarian todos los campos, excepto los que dicen @noupdate.

-Las anotaciones se pueden tratar como 'modifiers' que tengan semantica (algo como 'private', 'static', etc.). Por ejemplo, el modificador @no puede servir para varias cosas, especificadas en un parentesis (ej. @no(update, ...)). Asi sabriamos que @no hacer con el campo.

Con esto se logra que los modelos no tengan que heredar de ninguna clase (al final lo unico que especifica la clase 'Model' es el metodo obtenerLlave(), y este ya se saca del mismo mapeo. Ademas asi quedan mas consitentes los campos marcados como llave y sus valores, pues ya no se necesita retornar ninguna expresion de la forma "aaa|bbb|ccc").
Esto se podria especificar en un fichero que funcionaria como metadatos del modelo. 
Este mismo DSL se puede ir evolucionando para especificar tambien las validaciones, las vistas, etc.

OTRAS IDEAS:
-Estaba pensando que se podrian definir aspectos distintos de los modelos. Por ejemplo, podriamos tener un bloque para el mapeo, otro para las validaciones, y otros para las vistas.

-Se puede hacer un fichero .map para cada objeto del modelo. Al parser del mapeo de cierto modelo solo habria que indicarle el path de este fichero.